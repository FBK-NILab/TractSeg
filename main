#!/bin/bash

#PBS -l nodes=1:ppn=8,walltime=01:00:00
#PBS -l vmem=31gb
#PBS -N tractseg
#PBS -V

#needed for bridges
#SBATCH -p GPU-shared
#SBATCH --gres=gpu:p100:2

set -e
set -x

num_epochs=`jq -r '.num_epochs' config.json`

if [ -d 'dataset/' ]; then 
	rm -r dataset
fi

if [ ! $num_epochs == null ]; then
	echo "STARTING TRAINING..."

	python brainlife-utils/create_training_dataset.py
	SINGULARITYENV_PYTHONNOUSERSITE=true singularity exec -e docker://brainlife/dipy:0.16.0 brainlife-utils/create_training_dataset.py
	singularity exec --nv docker://paoloavesani/docker-test \
                    bin/peaks_to_cnn \
                    -json brainlife-utils/brainlife_config_training.json
                    
	if [ -d 'final_output/' ]; then 
 		rm -r final_output
	fi
	
	if [ -d 'weights/' ]; then 
 		rm -r weights
	fi

	mv output final_output
	mkdir weights
	mv final_output/*.npz weights/.
 	mv final_output/Hyperparameters.txt weights/.
	mkdir images
	mv final_output/*.png images/.
	cp brainlife-utils/brainlife_config_training.json images.json

	if [ -f weights/*.npz ]; then 
		echo "Training completed."
	else 
		echo "Weights missing."
		exit 1
	fi
  
else
	echo "STARTING TEST..."

  	#CMD="brainlife-utils/create_test_dataset.py && \
  	#bin/peaks_to_cnn -json brainlife-utils/brainlife_config_test.json && \
  	#brainlife-utils/adjust_test_output.py"
	#SINGULARITYENV_PYTHONNOUSERSITE=true
	singularity exec -e --nv docker://paoloavesani/docker-test bash -c "brainlife-utils/create_test_dataset.py && \
  	bin/peaks_to_cnn -json brainlife-utils/brainlife_config_test.json && \
  	brainlife-utils/adjust_test_output.py"

  	if [ -d 'tractseg_output/' ]; then 
 		rm -r tractseg_output
	fi
	mkdir tractseg_output
  	mv output tractseg_output
   
	if [ -z "$(ls -A -- "tractseg_output")" ]; then    
		echo "tractseg_output is empty."; 
		exit 1;
	else    
		echo "test done." 
	fi
fi   

