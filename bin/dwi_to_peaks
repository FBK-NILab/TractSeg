#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
from tractseg.libs import mrtrix


def main():
    parser = argparse.ArgumentParser(description="Generate peaks image.",
                                     epilog="Adapted from Jakob Wasserthal's script. Reference 'Wasserthal et al., TractSeg - Fast and accurate white matter tract segmentation. https://doi.org/10.1016/j.neuroimage.2018.07.070)'")
    parser.add_argument("-i", 
                        metavar="file_in", 
                        dest="file_in", 
                        help="input file (4D nifti diffusion image)",
                        required=True)
    parser.add_argument("-o", 
                        metavar="file_out", 
                        dest="file_out", 
                        help="output peaks file, default: \'peaks.nii.gz\'", 
                        default='peaks.nii.gz')
    parser.add_argument("--bvals", 
                        metavar="bvals", 
                        dest="bvals", 
                        help="bvals file", 
                        required=True)
    parser.add_argument("--bvecs", 
                        metavar="bvecs", 
                        dest="bvecs", 
                        help="bvecs file", 
                        required=True)
    parser.add_argument("--brain_mask", 
                        metavar="brain_mask", 
                        dest="brain_mask", 
                        help="brain mask", 
                        required=True)
    parser.add_argument("--csd_type", 
                        metavar="csd_type", 
                        dest="csd_type", 
                        choices=['csd_msmt_5tt','csd_msmt','csd'],
                        help="type of csd, choices: csd_msmt_5tt | csd_msmt | csd\ndefault: \'csd\', suggested: \'csd_msmt_5tt\'; description: ms = multi-shell, mt = multi-tissue, 5tt = 5-tissue-type", 
                        default='csd')
    parser.add_argument("--cpus", 
                        metavar="num_cpu", 
                        dest="num_cpu", 
                        help="Number of CPUs", 
                        required=False,
                        default=-1)


    args = parser.parse_args()

    # compute peaks
    mrtrix.create_fods(args.file_in, args.file_out, args.bvals, args.bvecs,
                       args.brain_mask, args.csd_type, nr_cpus=args.num_cpu)

if __name__ == '__main__':
    main()
