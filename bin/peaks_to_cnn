#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This module is for training the model. See Readme.md for more details about 
training your own model.

How to use this module:

#Run local:
ExpRunner --config=XXX

#Run slurm cluster:
sbatch --job-name=XXX ~/runner.sh   (runner.sh not provided)

#Predicting with new config setup:
ExpRunner --train=False --seg --lw --config=XXX
ExpRunner --train=False --test=True --lw --config=XXX
"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import warnings
warnings.simplefilter("ignore", UserWarning)    #hide scipy warnings
warnings.simplefilter("ignore", FutureWarning)    #hide h5py warnings
warnings.filterwarnings("ignore", message="numpy.dtype size changed") #hide Cython benign warning
warnings.filterwarnings("ignore", message="numpy.ufunc size changed") #hide Cython benign warning
import importlib
import argparse
import pickle
import time
from pprint import pprint
import distutils.util
from os.path import join
import nibabel as nib
import numpy as np
import json

from tractseg.libs import direction_merger
from tractseg.libs import exp_utils
from tractseg.libs import img_utils
from tractseg.libs import metric_utils
from tractseg.libs.system_config import SystemConfig as C
from tractseg.libs import trainer
from tractseg.data.data_loader_training import DataLoaderTraining as DataLoaderTraining2D
from tractseg.data.data_loader_inference import DataLoaderInference
from tractseg.models.base_model import BaseModel


def main():
    parser = argparse.ArgumentParser(description="Train a network on your own data to segment white matter bundles.",
                                        
                                     epilog="Written by Pietro Astolfi. Please reference 'Wasserthal et al., TractSeg - Fast and accurate white matter tract segmentation. https://doi.org/10.1016/j.neuroimage.2018.07.070)'")
    parser.add_argument("-json", 
                        metavar="json", 
                        help="Name of configuration to use")
     args = parser.parse_args()

    Config = getattr(importlib.import_module("tractseg.experiments.base"), 
                     "Config")()

    if args.config:
        # Config.__dict__ does not work properly
        Config = getattr(importlib.import_module("tractseg.experiments.custom." + args.config), "Config")()

    with open(args.json) as cfg_src:
        cfg = json.load(cfg_src)

    C.HOME = cfg["home"]
    C.TRACTSEG_DATA_DIR = cfg["tractseg_data_dir"]
    C.TRACTSEG_WEIGHTS_DIR = cfg["tractseg_weights_dir"]
    C.EXP_PATH = cfg["exp_path"]

    Config.EXP_NAME = cfg["exp_name"]
    Config.MODEL = cfg["model"]
    Config.NUM_EPOCHS = cfg["num_epochs"]
    Config.DATASET = cfg["dataset"]
    Config.CLASSES = cfg["classes"]
    Config.DATASET_FOLDER = cfg["dataset_folder"]
    Config.LABELS_FOLDER = cfg["labels_folder"]
    Config.LOAD_WEIGHTS = cfg["load_weights"]
    Config.TRACTSEG_DIR = cfg["tractseg_dir"]
    Config.TRAIN_SUBJECTS = cfg["train_subjects"]
    Config.TEST_SUBJECTS = cfg["test_subjects"]
    Config.FEATURES_FILENAME = cfg["features_filename"]
 
    Config.MULTI_PARENT_PATH = join(C.EXP_PATH, Config.EXP_MULTI_NAME)
    Config.EXP_PATH = join(C.EXP_PATH, Config.EXP_MULTI_NAME, Config.EXP_NAME)

    if Config.WEIGHTS_PATH == "":
        Config.WEIGHTS_PATH = exp_utils.get_best_weights_path(Config.EXP_PATH, Config.LOAD_WEIGHTS)

    #Autoset input dimensions based on settings
    Config.INPUT_DIM = exp_utils.get_correct_input_dim(Config)

    Config.NR_OF_CLASSES = len(exp_utils.get_bundle_names(Config.CLASSES)[1:])

    Config.EXP_PATH = exp_utils.create_experiment_folder(Config.EXP_NAME, Config.MULTI_PARENT_PATH, Config.TRAIN)

    print("Hyperparameters:")
    exp_utils.print_Configs(Config)

    return

    with open(join(Config.EXP_PATH, "Hyperparameters.txt"), "w") as f:
        Config_dict = {attr: getattr(Config, attr) for attr in dir(Config)
                       if not callable(getattr(Config, attr)) 
                       and not attr.startswith("__")}
        pprint(Config_dict, f)

    model = BaseModel(Config)
    data_loader = DataLoaderTraining2D(Config)

    print("Training...")
    model = trainer.train_model(Config, model, data_loader)

    print("Testing...")
    #test_whole_subject(Config, model, Config.TEST_SUBJECTS, "test")

if __name__ == '__main__':
    main()
