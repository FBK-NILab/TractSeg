#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2017 Division of Medical Image Computing, German Cancer Research Center (DKFZ)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This module is for training the model. See Readme.md for more details about training your own model.

How to use this module:

#Run local:
ExpRunner --config=XXX

#Run slurm cluster:
sbatch --job-name=XXX ~/runner.sh   (runner.sh not provided)

#Predicting with new config setup:
ExpRunner --train=False --seg --lw --config=XXX
ExpRunner --train=False --test=True --lw --config=XXX
"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import warnings
warnings.simplefilter("ignore", UserWarning)    #hide scipy warnings
warnings.simplefilter("ignore", FutureWarning)    #hide h5py warnings
warnings.filterwarnings("ignore", message="numpy.dtype size changed") #hide Cython benign warning
warnings.filterwarnings("ignore", message="numpy.ufunc size changed") #hide Cython benign warning
import importlib
import argparse
import pickle
import time
from pprint import pprint
import distutils.util
from os.path import join
import nibabel as nib
import numpy as np

from tractseg.libs import direction_merger
from tractseg.libs import exp_utils
from tractseg.libs import img_utils
from tractseg.libs import metric_utils
from tractseg.libs.system_config import SystemConfig as C
from tractseg.libs import trainer
from tractseg.data.data_loader_training import DataLoaderTraining as DataLoaderTraining2D
from tractseg.data.data_loader_training_3D import DataLoaderTraining as DataLoaderTraining3D
from tractseg.data.data_loader_inference import DataLoaderInference
from tractseg.models.base_model import BaseModel


def main():
    parser = argparse.ArgumentParser(description="Train a network on your own data to segment white matter bundles.",
                                        epilog="Written by Jakob Wasserthal. Please reference 'Wasserthal et al. "
                                               "TractSeg - Fast and accurate white matter tract segmentation. "
                                               "https://doi.org/10.1016/j.neuroimage.2018.07.070)'")
    parser.add_argument("--config", metavar="name", help="Name of configuration to use")
    parser.add_argument("--train", metavar="True/False", help="Train network",
                        type=distutils.util.strtobool, default=True)
    parser.add_argument("--test", metavar="True/False", help="Test network",
                        type=distutils.util.strtobool, default=False)
    parser.add_argument("--seg", action="store_true", help="Create binary segmentation")
    parser.add_argument("--probs", action="store_true", help="Create probmap segmentation")
    parser.add_argument("--lw", action="store_true", help="Load weights of pretrained net")
    parser.add_argument("--en", metavar="name", help="Experiment name")
    parser.add_argument("--fold", metavar="N", help="Which fold to train when doing CrossValidation", type=int)
    parser.add_argument("--verbose", action="store_true", help="Show more intermediate output", default=True)
    args = parser.parse_args()

    Config = getattr(importlib.import_module("tractseg.experiments.base"), "Config")()
    if args.config:
        # Config.__dict__ does not work properly
        Config = getattr(importlib.import_module("tractseg.experiments.custom." + args.config), "Config")()

    if args.en:
        Config.EXP_NAME = args.en

    Config.TRAIN = bool(args.train)
    Config.TEST = bool(args.test)
    if args.seg:
        Config.SEGMENT = True
    if args.probs:
        Config.GET_PROBS = True
    if args.lw:
        Config.LOAD_WEIGHTS = args.lw
    if args.fold:
        Config.CV_FOLD= args.fold
    Config.VERBOSE = args.verbose

    Config.MULTI_PARENT_PATH = join(C.EXP_PATH, Config.EXP_MULTI_NAME)
    Config.EXP_PATH = join(C.EXP_PATH, Config.EXP_MULTI_NAME, Config.EXP_NAME)
    Config.TRAIN_SUBJECTS, Config.VALIDATE_SUBJECTS, Config.TEST_SUBJECTS = exp_utils.get_cv_fold(Config.CV_FOLD,
                                                                                                  dataset=Config.DATASET)

    if Config.WEIGHTS_PATH == "":
        Config.WEIGHTS_PATH = exp_utils.get_best_weights_path(Config.EXP_PATH, Config.LOAD_WEIGHTS)

    #Autoset input dimensions based on settings
    Config.INPUT_DIM = exp_utils.get_correct_input_dim(Config)
    Config = exp_utils.get_labels_filename(Config)

    if Config.EXPERIMENT_TYPE == "peak_regression":
        Config.NR_OF_CLASSES = 3*len(exp_utils.get_bundle_names(Config.CLASSES)[1:])
    else:
        Config.NR_OF_CLASSES = len(exp_utils.get_bundle_names(Config.CLASSES)[1:])

    if Config.TRAIN:
        Config.EXP_PATH = exp_utils.create_experiment_folder(Config.EXP_NAME, Config.MULTI_PARENT_PATH, Config.TRAIN)

    if Config.DIM == "2D":
        Config.EPOCH_MULTIPLIER = 1
    else:
        Config.EPOCH_MULTIPLIER = 3

    if Config.VERBOSE:
        print("Hyperparameters:")
        exp_utils.print_Configs(Config)

    with open(join(Config.EXP_PATH, "Hyperparameters.txt"), "w") as f:
        Config_dict = {attr: getattr(Config, attr) for attr in dir(Config)
                       if not callable(getattr(Config, attr)) and not attr.startswith("__")}
        pprint(Config_dict, f)

    def test_whole_subject(Config, model, subjects, type):

        metrics = {
            "loss_" + type: [0],
            "f1_macro_" + type: [0],
        }

        # Metrics per bundle
        metrics_bundles = {}
        for bundle in exp_utils.get_bundle_names(Config.CLASSES)[1:]:
            metrics_bundles[bundle] = [0]

        for subject in subjects:
            print("{} subject {}".format(type, subject))
            start_time = time.time()

            data_loader = DataLoaderInference(Config, subject=subject)
            img_probs, img_y = trainer.predict_img(Config, model, data_loader, probs=True)
            # img_probs_xyz, img_y = DirectionMerger.get_seg_single_img_3_directions(Config, model, subject=subject)
            # img_probs = DirectionMerger.mean_fusion(Config.THRESHOLD, img_probs_xyz, probs=True)

            print("Took {}s".format(round(time.time() - start_time, 2)))

            if Config.EXPERIMENT_TYPE == "peak_regression":
                f1 = metric_utils.calc_peak_length_dice(Config, img_probs, img_y,
                                                        max_angle_error=Config.PEAK_DICE_THR,
                                                        max_length_error=Config.PEAK_DICE_LEN_THR)
                peak_f1_mean = np.array([s for s in f1.values()]).mean()  # if f1 for multiple bundles
                metrics = metric_utils.calculate_metrics(metrics, None, None, 0, f1=peak_f1_mean,
                                                         type=type, threshold=Config.THRESHOLD)
                metrics_bundles = metric_utils.calculate_metrics_each_bundle(metrics_bundles, None, None,
                                                                             exp_utils.get_bundle_names(Config.CLASSES)[1:],
                                                                             f1, threshold=Config.THRESHOLD)
            else:
                img_probs = np.reshape(img_probs, (-1, img_probs.shape[-1]))  #Flatten all dims except nrClasses dim
                img_y = np.reshape(img_y, (-1, img_y.shape[-1]))
                metrics = metric_utils.calculate_metrics(metrics, img_y, img_probs, 0,
                                                         type=type, threshold=Config.THRESHOLD)
                metrics_bundles = metric_utils.calculate_metrics_each_bundle(metrics_bundles, img_y, img_probs,
                                                                             exp_utils.get_bundle_names(Config.CLASSES)[1:],
                                                                             threshold=Config.THRESHOLD)

        metrics = metric_utils.normalize_last_element(metrics, len(subjects), type=type)
        metrics_bundles = metric_utils.normalize_last_element_general(metrics_bundles, len(subjects))

        print("WHOLE SUBJECT:")
        pprint(metrics)
        print("WHOLE SUBJECT BUNDLES:")
        pprint(metrics_bundles)

        with open(join(Config.EXP_PATH, "score_" + type + "-set.txt"), "w") as f:
            pprint(metrics, f)
            f.write("\n\nWeights: {}\n".format(Config.WEIGHTS_PATH))
            f.write("type: {}\n\n".format(type))
            pprint(metrics_bundles, f)
        pickle.dump(metrics, open(join(Config.EXP_PATH, "score_" + type + ".pkl"), "wb"))
        return metrics


    model = BaseModel(Config)
    if Config.DIM == "2D":
        data_loader = DataLoaderTraining2D(Config)
    else:
        data_loader = DataLoaderTraining3D(Config)

    if Config.TRAIN:
        print("Training...")
        model = trainer.train_model(Config, model, data_loader)

    # After Training
    if Config.TRAIN:
        Config.DATA_AUGMENTATION = cfg['data_augmentation']
        # Have to load other weights, because after training it has the weights of the last epoch
        print("Loading best epoch: {}".format(Config.BEST_EPOCH))
        Config.WEIGHTS_PATH = Config.EXP_PATH + "/best_weights_ep" + str(Config.BEST_EPOCH) + ".npz"
        Config.LOAD_WEIGHTS = True
        model.load_model(join(Config.EXP_PATH, Config.WEIGHTS_PATH))
        model_test = model
    else:
        # Weight_path already set to best model (when reading program parameters) -> will be loaded automatically
        model_test = model

    if Config.SEGMENT:
        exp_utils.make_dir(join(Config.EXP_PATH, "segmentations"))
        # all_subjects = Config.VALIDATE_SUBJECTS + Config.TEST_SUBJECTS
        all_subjects = ["599469"]
        for subject in all_subjects:
            print("Get_segmentation subject {}".format(subject))

            if Config.EXPERIMENT_TYPE == "peak_regression":
                data_loader = DataLoaderInference(Config, subject=subject)
                img_probs, img_y = trainer.predict_img(Config, model_test, data_loader,
                                                       probs=True)  # only x or y or z
                img_seg = img_utils.peak_image_to_binary_mask(img_probs,
                                                              len_thr=0.4)  # thr: 0.4 slightly better than 0.2
            else:
                # returns probs not binary seg
                img_seg, img_y = direction_merger.get_seg_single_img_3_directions(Config, model, subject)
                img_seg = direction_merger.mean_fusion(Config.THRESHOLD, img_seg, probs=False)

            #TractSeg
            # img_utils.save_multilabel_img_as_multiple_files(Config, img_seg,
            #                                              img_utils.get_dwi_affine(Config.DATASET, Config.RESOLUTION),
            #                                              join(Config.EXP_PATH, "segmentations_" + subject))

            #Tract Beginnings and Endings
            # img_utils.save_multilabel_img_as_multiple_files_endings(Config, img_seg,
            #                                               img_utils.get_dwi_affine(Config.DATASET, Config.RESOLUTION),
            #                                               join(Config.EXP_PATH, "segmentations_" + subject))

            img = nib.Nifti1Image(img_seg.astype(np.uint8), img_utils.get_dwi_affine(Config.DATASET, Config.RESOLUTION))
            nib.save(img, join(Config.EXP_PATH, "segmentations", subject + "_segmentation.nii.gz"))

    if Config.TEST:
        test_whole_subject(Config, model_test, Config.VALIDATE_SUBJECTS, "validate")
        # test_whole_subject(Config, model_test, Config.TEST_SUBJECTS, "test")

    if Config.GET_PROBS:
        exp_utils.make_dir(join(Config.EXP_PATH, "probmaps"))
        # all_subjects = Config.TRAIN_SUBJECTS + Config.VALIDATE_SUBJECTS + Config.TEST_SUBJECTS
        all_subjects = ["599469", "992774", "994273"]
        for subject in all_subjects:
            print("Get_probs subject {}".format(subject))

            data_loader = DataLoaderInference(Config, subject=subject)

            if Config.EXPERIMENT_TYPE == "peak_regression":
                # trainerSingle = Trainer(model_test, dataManagerSingle)
                img_probs, img_y = trainer.predict_img(Config, model_test, data_loader, probs=True)
                img_probs = img_utils.remove_small_peaks(img_probs, len_thr=0.4)
            else:
                img_probs, img_y = direction_merger.get_seg_single_img_3_directions(Config, model, subject=subject)
                img_probs = direction_merger.mean_fusion(Config.THRESHOLD, img_probs, probs=True)

            # img_utils.save_multilabel_img_as_multiple_files_peaks(Config, img_probs,
            #                                               img_utils.get_dwi_affine(Config.DATASET, Config.RESOLUTION),
            #                                               join(Config.EXP_PATH, "probmaps_" + subject))

            # img_utils.save_multilabel_img_as_multiple_files(Config, img_probs,
            #                                             img_utils.get_dwi_affine(Config.DATASET, Config.RESOLUTION),
            #                                             join(Config.EXP_PATH, "probmaps_" + subject))

            img = nib.Nifti1Image(img_probs, img_utils.get_dwi_affine(Config.DATASET, Config.RESOLUTION))
            nib.save(img, join(Config.EXP_PATH, "probmaps", subject + "_peak.nii.gz"))


if __name__ == '__main__':
    main()
